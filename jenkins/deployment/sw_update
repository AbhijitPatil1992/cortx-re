#!/usr/bin/env groovy
pipeline { 
    agent {
        node {
            label "sw_update"
        }
    }
	
    parameters {
        string(name: 'SW_UPDATE_BUILD', defaultValue: 'http://cortx-storage.colo.seagate.com/releases/cortx/github/cortx-1.0/iso/centos-7.8.2003/cortx-1.0-532.iso', description: 'Build URL', trim: true)
        string(name: 'HOST', defaultValue: '', description: 'Primary Node FQDN', trim: true)
        string(name: 'HOST_SSH_PASSWORD', defaultValue: 'seagate1', description: 'Host SSH Password', trim: true)
        string(name: 'CSM_UI_USERNAME', defaultValue: 'admin', description: 'CSM Admin UI Username', trim: true)
        string(name: 'CSM_UI_PASSWORD', defaultValue: 'Seagate@1', description: 'CSM Admin UI Password', trim: true)
    }

	environment {
        build_id = sh(script: "basename ${SW_UPDATE_BUILD}", returnStdout: true).trim()
    }

    options {
        timeout(time: 300, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm') 
        buildDiscarder(logRotator(numToKeepStr: "30"))
    }

    stages {

        stage ('Prerequisite') {
            steps {
                script {
                    
                        manager.addHtmlBadge("&emsp;<b>Build :</b> <a href=\"${SW_UPDATE_BUILD}\"><b>${build_id}</b></a> <br /> <b>Host :</b> <a href=\"${HOST}\"><b>${HOST}</b></a>")

                        sh """
                            set +x
                            echo "--------------SW UPDATE PARAMETERS -------------------"
                            echo "SW_UPDATE_BUILD       = ${SW_UPDATE_BUILD}"
                            echo "HOST                  = ${HOST}"
                            echo "HOST_SSH_PASSWORD     = ${HOST_SSH_PASSWORD}"
                            echo "CSM_UI_USERNAME       = ${CSM_UI_USERNAME}"
                            echo "CSM_UI_PASSWORD       = ${CSM_UI_PASSWORD}"
                            echo "-----------------------------------------------------------"
                        """
                        dir('cortx-re') {
                            checkout([$class: 'GitSCM', branches: [[name: '*/r1_sw_update']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'cortx-admin-github', url: 'https://github.com/Seagate/cortx-re']]])                
                        }
                    }
                }
            }

            stage('01. SW Update') {
                
                steps {
                
                    script {
                        dir("cortx-re/scripts/deployment") {
                            
                            ansiblePlaybook(
                                playbook: 'cortx_sw_update.yml',
                                inventory: 'inventories/sw_update/hosts',
                                extraVars: [
                                    "HOST"                 : [value: "${HOST}", hidden: false],
                                    "CLUSTER_PASS"         : [value: "${HOST_SSH_PASSWORD}", hidden: false] ,
                                    "CSM_UI_USERNAME"      : [value: "${CSM_UI_USERNAME}", hidden: false],
                                    "CSM_UI_PASSWORD"      : [value: "${CSM_UI_PASSWORD}", hidden: false],
                                    "CORTX_UPDATE_ISO"     : [value: "${SW_UPDATE_BUILD}", hidden: false]
                                ],
                                extras: '-v',
                                colorized: true
                            )
                        }
                }
            }
        }
	}

    post { 
        always {
            script {
                    
                // Archive all log generated by Test
                archiveArtifacts artifacts: "**/*.log, **/*.png ", onlyIfSuccessful: false, allowEmptyArchive: true 
                cleanWs()
            }
        }
    }
}	